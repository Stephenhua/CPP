/*
题目：背包问题求具体方案；
有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。

第 i 件物品的体积是 vi，价值是 wi。

求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。

输出 字典序最小的方案。这里的字典序是指：所选物品的编号所构成的序列。物品的编号范围是 1…N。

输入格式
第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。

接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。

输出格式
输出一行，包含若干个用空格隔开的整数，表示最优解中所选物品的编号序列，且该编号序列的字典序最小。

物品编号范围是 1…N。

数据范围
0<N,V≤1000
0<vi,wi≤1000
输入样例
4 5
1 2
2 4
3 4
4 6
输出样例：
1 4

*/


/*
算法分析
1、由于题目要求求字典序最小的方案，因此从1到n中，每个物品有3种情况

(1)只能选，则必须选

(2)不能选，则必不选

(3)可选可不选，则必须选
在前面物品能选的情况下优先选择前面的物品

2、为了满足上述条件，因此需要从第n个物品遍历到第1个物品，求出当前背包的最大总价值f[1][m]

3、再从第1个物品遍历到第n个物品，其中f[i][j]为当前最优情况，若满足

(1)f[i][j] == f[i + 1][j],则表示f[i][j]是从f[i + 1][j]状态转移过来的

(2)f[i][j] == f[i + 1][j - v[i]] + w[i]，则表示f[i][j]是从f[i + 1][j - v[i]]状态转移过来的
从而找出字典序最小的路径方案

*/
#include <iostream>
#include <vector>

using namespace std;

int main( int argc, char* argv[]){
    int n , m ;
    cin >>  n >> m ;

    vector<int> v(n+1,0);
    vector<int> w(n+1,0);

    for(int i = 1 ;i <= n ; i++){
        cin >> v[i]  >> w[i];
    }

    vector<vector<int>> dp(10001,vector<int>(10001,0));

    for(int i = n ;i >=1 ;i--){
        for(int j = 0 ; j <= m ; j++){
            dp[i][j] = dp[i+1][j];
            if( j >= v[i]){
                dp[i][j] = max( dp[i+1][j],dp[i+1][j-v[i]]+w[i]);
            }
        }
    }

    int vol = m;
/*
如果f(1,m)=f(2,m−v[1])+w[1]f(1,m)=f(2,m−v[1])+w[1]，说明选取了第1个物品可以得到最优解。

如果f(1,m)=f(2,m)f(1,m)=f(2,m)，说明不选取第一个物品才能得到最优解。

如果f(1,m)=f(2,m)=f(2,m−v[1])+w[1]f(1,m)=f(2,m)=f(2,m−v[1])+w[1]，说明选不选都可以得到最优解，但是为了考虑字典序最小，我们也需要选取该物品。

*/
    for(int i =1 ;i <= n; i++){
        if(dp[i][vol] == dp[i+1][vol-v[i]]+w[i] && v[i]<=vol){
            cout <<i<<" ";
            vol-=v[i];
        }
    }

    system("pause");
    return 0 ;
}